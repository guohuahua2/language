#include<iostream>
using namespace std;
#define OK 1
#define OVERFLOW -2
typedef int Status;
typedef int ElemType;
#define MAXSIZE 100
//顺序表存储结构
typedef struct{
ElemType *elem;
int length;
}SqList;
//顺序表的初始化
int InitList(SqList &L)
{
    L.elem = new ElemType[MAXSIZE];
    if (!L.elem) exit(OVERFLOW); 
    L.length = 0;
    return OK;
}
//顺序表的查找
int LocateElem(SqList L, ElemType e)
{
    int i=0;
    for (i=0;i<L.length;i++)
    if (L.elem[i] == e)
    return i + 1;
    return 0;
}
//顺序表的插入
int ListInsert(SqList &L,int i,ElemType e)
{
    if (i < 1 || i > L.length + 1) return ERROR;
    if (L.length == MAXSIZE) return ERROR;
    for (int j = L.length - 1; j >= i - 1; j--)
    L.elem[j + 1] = L.elem[j];
    L.elem[i - 1] = e;
    ++L.length;
    return OK;
}
//顺序表的删除
int ListDelete(SqList &L,int i,ElemType &e)
{
    if (i < 1 || i > L.length) return ERROR;
    e=L.elem[i-1];
    for (int j = i; j < L.length; j++)
    L.elem[j - 1] = L.elem[j];
    --L.length;
    return OK;
}
int main()
{
SqList L;
int i,res,temp,a,b,c,e,choose;
cout<<"1.建立顺序表\n";
cout<<"2.输入数据\n";
cout<<"3.查找\n";
cout<<"4.插入\n";
cout<<"5.删除\n";
cout<<"6.输出数据\n";
cout<<"0.退出\n\n";	
choose=-1;
while(choose!=0)
{
	cout<<"请选择";
	cin>>choose;
	switch(choose)
	{case 1:
		if(InitList(L))
		cout<<"成功建立链表\n"; 
		else cout<<"建立链表失败"; 
		break;
	case 2:
		cout<<"请输入10个数\n";
		for(i=0;i<10;i++)
		cin>>L.elem[i];
		L.length=10;
		cout<<endl;
		break;
	case 3:
		cout<<"请输入要查找的数";
		cin>>e;
		temp=LocateElem(L,e);
		if(temp!=0)
		cout<<e<<"是第"<<temp<<"个数\n"; 
		else
		cout<<"查找失败，没有这样的数\n";
		break;
	case 4:
	cout<<"请输入两个数，分别代表插入的位置和数值";
	cin>>a>>b;
	if(ListInsert(L,a,b))
	cout<<"插入成功";
	else cout<<"插入失败\n";
	break;
	case 5:
        cout<<"请输入所要删除数的位置";
	cin>>c;
	if(ListDelete(L,c,res))
	cout<<"删除成功\n被删除的数是："<<res<<endl;
	else cout<<"删除失败\n";
	break;
	case 6:
	cout<<"当前顺序表为：\n";
	for(i=0;i<L.length;i++)
	cout<<L.elem[i]<<" ";
	cout<<endl;
	break; 
	}
} 
return 0;
}
